#N canvas 155 47 766 651 10;
#X msg 93 470 2 3 100;
#X obj 223 357 hradio 15 1 0 2 empty empty empty 0 -8 0 10 -262144
-1 -1 0;
#X msg 267 357 asc;
#X msg 305 357 desc;
#X obj 93 205 list-random 100 10;
#X obj 125 256 prepent set;
#X msg 93 179 bang;
#X obj 93 230 t b a;
#X msg 93 291 91 35 78 70 85 46 64 10 93 83;
#X text 279 324 non-floats are removed with a warning.;
#X msg 135 324 100 2 wrong type 3;
#X obj 93 441 prepent set;
#X text 66 80 Inlets: 1) list to sort;
#X text 66 134 Argument:;
#X text 121 98 2) direction: 0 or asc for ascending \, 1 or desc for
descending;
#X text 137 134 <direction: 0/asc for ascending \, 1/desc for descending>
;
#X text 65 40 Sort an incoming list of values in ascending or descending
order. Non-numbers are dropped.;
#X text 299 510 Alternative implementations available in:;
#X obj 383 540 list-shellsort;
#X obj 309 540 list-sort;
#X text 59 525 2008 Matt Barber;
#X obj 93 396 list-quicksort desc;
#X obj 35 11 list-quicksort;
#N canvas 506 181 494 396 META 0;
#X text 12 25 LICENSE SIBSD;
#X text 12 5 KEYWORDS control list_op;
#X text 12 75 INLET_0 list;
#X text 12 95 INLET_1 float asc desc;
#X text 12 115 OUTLET_0 list;
#X text 12 135 AUTHOR Matt Barber;
#X text 12 155 HELP_PATCH_AUTHORS Matt Barber \, Frank Barknecht;
#X text 11 44 DESCRIPTION sort an incoming list of values in ascending
or descending order using a quicksort algorithm on a table.;
#X restore 675 603 pd META;
#X connect 1 0 21 1;
#X connect 2 0 21 1;
#X connect 3 0 21 1;
#X connect 4 0 7 0;
#X connect 5 0 8 0;
#X connect 6 0 4 0;
#X connect 7 0 8 0;
#X connect 7 1 5 0;
#X connect 8 0 21 0;
#X connect 10 0 21 0;
#X connect 11 0 0 0;
#X connect 21 0 11 0;
